--------
Links & Descriptions
--------
twitter friendship 1 to 1
https://dev.twitter.com/rest/reference/get/friendships/show


--------
Notes
--------

Twitter Friendship response between two users:

(Friendship
(_api=<tweepy.api.API object at 0x102cabd68>, id=151901549, id_str='151901549', screen_name='phonedude_mln', following=True, followed_by=True, live_following=False, following_received=None, following_requested=None, notifications_enabled=None, can_dm=True, blocking=None, blocked_by=None, muting=None, want_retweets=None, all_replies=None, marked_spam=None), 
Friendship(_api=<tweepy.api.API object at 0x102cabd68>, id=75550501, id_str='75550501', screen_name='weiglemc', following=True, followed_by=True, following_received=None, following_requested=None)
)

//SECOND D3 V3

		nodeKeys = graph.nodes;
		var nodes = {};

		var links = graph.links;

		// Compute the distinct nodes from the links.
		// links.forEach(function(link) {
		//     link.source = nodes[link.source] || 
		//         (nodes[link.source] = {name: link.source});
		//     link.target = nodes[link.target] || 
		//         (nodes[link.target] = {name: link.target});
		// });

		var width = 960,
		    height = 600;

		var force = d3.layout.force()
		    .nodes(d3.values(nodes))
		    .links(links)
			    .gravity(0.1)
		      .charge(-2000)
		      .linkDistance(1)
		      .linkStrength(0.1)
		    .size([width, height])
		    .on("tick", tick)
		    .start();

		var svg = d3.select(".svg-section").append("svg")
		    .attr("width", width)
		    .attr("height", height);

		// build the arrow.
		// svg.append("svg:defs").selectAll("marker")
		//     .data(["end"])      // Different link/path types can be defined here
		//   .enter().append("svg:marker")    // This section adds in the arrows
		//     .attr("id", String)
		//     .attr("viewBox", "0 -5 10 10")
		//     .attr("refX", 15)
		//     .attr("refY", -1.5)
		//     .attr("markerWidth", 6)
		//     .attr("markerHeight", 6)
		//     .attr("orient", "auto")
		//   .append("svg:path")
		//     .attr("d", "M0,-5L10,0L0,5");

		// add the links and the arrows
		var path = svg.append("svg:g").selectAll("path")
		    .data(force.links())
		  .enter().append("svg:path")
		//    .attr("class", function(d) { return "link " + d.type; })
		    .attr("class", "link")
		    .attr("marker-end", "url(#end)");

		// define the nodes
		var node = svg.selectAll(".node")
		    .data(force.nodes())
		  .enter().append("g")
		    .attr("class", "node")
		    .call(force.drag);

		// add the nodes
		node.append("circle")
		    .attr("r", 5);

		// add the text 
		node.append("text")
		    .attr("x", 12)
		    .attr("dy", ".35em")
		    .text(function(d) { return d.name; });

		// add the curvy lines
		function tick() {
		    path.attr("d", function(d) {
		        var dx = d.target.x - d.source.x,
		            dy = d.target.y - d.source.y,
		            dr = Math.sqrt(dx * dx + dy * dy);
		        return "M" + 
		            d.source.x + "," + 
		            d.source.y + "A" + 
		            dr + "," + dr + " 0 0,1 " + 
		            d.target.x + "," + 
		            d.target.y;
		    });

		    node
		        .attr("transform", function(d) { 
		  	    return "translate(" + d.x + "," + d.y + ")"; });

		}



// FIRST D3 v4
	var svg = d3.select("svg"),
    width = +svg.attr("width"),
    height = +svg.attr("height");


    svg = svg.call(d3.zoom().on("zoom", zoomed)).append("g");

	var color = d3.scaleOrdinal(d3.schemeCategory20);

	var simulation = d3.forceSimulation()
	    .force("link", d3.forceLink().id(function(d) { return d.id; }))
	    .force("charge", d3.forceManyBody())
	    .force("center", d3.forceCenter(width / 2, height / 2));


	d3.json("data/friendships.json", function(error, graph) {
	  if (error) throw error;

	  var link = svg.append("g")
	      .attr("class", "links")
	    .selectAll("line")
	    .data(graph.links)
	    .enter().append("line");

	  var node = svg.append("g")
	    .attr("class", "nodes")
	    .selectAll("circle")
	    .data(graph.nodes)
	    .enter().append("circle")

	    .attr("r", 5)
	    .call(d3.drag()
	        .on("start", dragstarted)
	        .on("drag", dragged)
	        .on("end", dragended));

	  node.append("title")
	      .text(function(d) { return d.id; });

		var images = node.append("svg:image")
        .attr("xlink:href",  function(d) { return d.image;})
        .attr("x", function(d) { return -25;})
        .attr("y", function(d) { return -25;})
        .attr("height", 50)
        .attr("width", 50);

	  simulation
	      .nodes(graph.nodes)
	      .on("tick", ticked);

	  simulation.force("link")
	      .links(graph.links);

	  function ticked() {
	    link
	        .attr("x1", function(d) { return d.source.x; })
	        .attr("y1", function(d) { return d.source.y; })
	        .attr("x2", function(d) { return d.target.x; })
	        .attr("y2", function(d) { return d.target.y; });

	    node
	        .attr("cx", function(d) { return d.x; })
	        .attr("cy", function(d) { return d.y; });
	  }
	});

	// node events
	function dragstarted(d) {
	  if (!d3.event.active) simulation.alphaTarget(0.3).restart();
	  d.fx = d.x;
	  d.fy = d.y;
	}

	function dragged(d) {
	  d.fx = d3.event.x;
	  d.fy = d3.event.y;
	}

	function dragended(d) {
	  if (!d3.event.active) simulation.alphaTarget(0);
	  d.fx = null;
	  d.fy = null;
	}

	function zoomed() {
  		svg.attr("transform", "translate(" + d3.event.transform.x + "," 
  			+ d3.event.transform.y + ")" + " scale(" + d3.event.transform.k + ")");
	}